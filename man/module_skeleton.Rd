% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build.R
\name{module_skeleton}
\alias{module_skeleton}
\title{Generate a skeleton for a module}
\usage{
module_skeleton(
  program_name,
  repo_user = NULL,
  docker_user = NULL,
  flpth = getwd(),
  module_name = NULL,
  cmd = program_name,
  full_name = NULL,
  email = NULL,
  service = c("github", "gitlab", "bitbucket"),
  overwrite = FALSE
)
}
\arguments{
\item{program_name}{Name of the command-line program.}

\item{repo_user}{Developer's username for code sharing service. If NULL, no
code sharing site information is added.}

\item{docker_user}{Developer's username for Docker. If NULL, no docker 
information is added.}

\item{flpth}{File path to location of where module will be created, default
current working directory.}

\item{module_name}{Name of the module, if NULL rendered as
"om..[program_name]"}

\item{cmd}{Command-line call for program, default [program_name]}

\item{full_name}{Your full name (for authorship)}

\item{email}{Your email (for authorship)}

\item{service}{Code-sharing site.}

\item{overwrite}{Automatically overwrite pre-exisiting files? If FALSE,
user is queried whether to overwrite for each pre-exisiting file.}
}
\value{
Character
}
\description{
Create all the base files and folders to kickstart the
development of a new outsider module. Returns file path to new module.
}
\details{
If \code{full_name} and \code{email} are provided, then new lines
are added to DESCRIPTION specifying the author and maintainer of the package.
}
\examples{
library(outsider)

# build file structure for an example module
module_path <- module_skeleton(program_name = "goldenhind",
                               repo_user = "drake_on_github",
                               docker_user = "drake_on_docker",
                               full_name = 'Sir Francis Drake',
                               email = 'f.drake@goldenhind.gov.uk',
                               service = 'github',
                               flpth = tempdir())
# new path created 
(module_path)
# check the generated names and links
module_identities(flpth = module_path)
# check the files are in the right locations
module_check(flpth = module_path)
# deliberately break: delete a folder and check again
unlink(x = file.path(module_path, 'inst'), recursive = TRUE, force = TRUE)
module_check(flpth = module_path)

# clean-up
unlink(x = module_path, recursive = TRUE, force = TRUE)
}
\seealso{
Other build: 
\code{\link{module_build}()},
\code{\link{module_check}()},
\code{\link{module_identities}()},
\code{\link{module_test}()},
\code{\link{module_travis}()},
\code{\link{module_upload}()}
}
\concept{build}
